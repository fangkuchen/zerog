#!/bin/bash

### VARIABLES ###

script_dir="$(dirname "$(realpath $0)")"
name="$(logname)"
progs="$script_dir/progs.list"
dotfiles="git://cybvik.xyz/dotfiles"
src="/home/$name/.local/src"
giturl="git://cybvik.xyz"
logfile="/tmp/zerog.log"

# Repos for programs not available in Parabola repos
mwrepo="https://aur.archlinux.org/mutt-wizard-git.git"
libxftrepo="https://aur.archlinux.org/libxft-bgra.git"

### FUNCTIONS ###

warning() {
    printf "WARNING: $1\n" >> "$logfile"
}

error() {
    printf "ERROR: $1\n" >> "$logfile"
    clear
    printf "Error: $1\n"
    exit 1
}

prepare() {
    printf "Preparing...\n"
    pacman -S --noconfirm --needed git zsh ca-certificates >/dev/null 2>&1 ||
	{ warning "Initial installs failed"; return 1; }
    grep -q "ILoveCandy" /etc/pacman.conf || 
	sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
    sed -Ei "s/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//" /etc/pacman.conf
}

install_programs() {
    printf "### Installing from progs.list ###\n"
    while read -r program; do
	printf "Installing $program\n"
        pacman -S --noconfirm --needed  "$program" >/dev/null 2>&1 ||
	    { warning "$program"; return 1; }
    done < "$progs"
}

get_dotfiles() {
    printf "### Installing dotfiles ###\n"
    sudo -u "$name" git clone "$dotfiles" /tmp/dotfiles >/dev/null 2>&1 ||
	{ warning "Could not clone dotfiles"; return 1; }
    sudo -u "$name" cp -rfT /tmp/dotfiles "/home/$name" >/dev/null 2>&1
}

suckless() {
    [ -d "$src" ] || sudo -u "$name" mkdir -p "$src"
    printf "### Installing suckless software ###\n"
    for program in dwm st dmenu slock; do
	cd "$src"
	printf "Installing $program\n"
	sudo -u "$name" git clone "$giturl/$program" >/dev/null 2>&1 ||
	    { warning "Could not clone $program"; return 1; }
	cd "$program" && make clean install >/dev/null 2>&1 || 
	    { warning "Could not install $program"; return 1; }
    done
}

git_install() {
    printf "### Installing $1 ###\n"
    sudo -u "$name" git clone "$2" /tmp/"$1" >/dev/null 2>&1 ||
	{ warning "Could not clone $1"; return 1; }
    cd /tmp/"$1"
    sudo -u "$name" makepkg -si >/dev/null 2>&1 ||
	{ warning "Could not makepkg $1"; return 1; }
}

follow_up() {
    printf "### Finishing touches ###\n"
    chsh -s /bin/zsh "$name" >/dev/null 2>&1
    sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"
    sudo -u "$name" mkdir -p "/home/$name/.config/mpd/playlists/"
    rmmod pcspkr
    printf "blacklist pcspkr\n" >/etc/modprobe.d/nobeep.conf
    yes | rm /home/$name/.bash*
    rc-update add avahi-daemon default >/dev/null
    rc-update add cupsd default >/dev/null
    rc-update add tor default >/dev/null
}

### SCRIPT ###

printf "###########################\n########## ZEROG ##########\n###########\
################\n"

prepare ||
    error "Please make sure that you have a working internet connection and \
you run ZEROG with sudo!"

install_programs ||
    error "Error during installation from progs.list"

get_dotfiles ||
    error "Could not install dotfiles"

suckless ||
    error "Could not install suckless programs"

# Git installs are disabled by default so you can choose if you want to install
# these packages from the AUR
# git_install libxft-bgra "$libxftrepo" || error "Could not install libxft-bgra"
# git_install mutt-wizard "$mwrepo" || error "Could not install mutt-wizard"

follow_up ||
    error "Follow up function failed"

printf "###########################\n########## ZEROG ##########\n###########\
################\nZEROG flight finished. Log in again and run 'startx' to \
start your new system\nIf you liked this script, want to report bugs/issues \
or contribute to it, let me know via mail <zerog@cybvik.xyz>\n"
