#!/bin/bash

### VARIABLES ###

name="$(logname)"
homedir="/home/$name"
progs="https://hanetzok.net/zerog/progs.list"
dotfiles="git://git.hanetzok.net/dotfiles"
logfile="/tmp/zerog.log"
suckless="git://git.hanetzok.net"

### FUNCTIONS ###

error() { # Write to logfile and exit script
    printf "#######\n#ERROR#\n#######\n$1\n" >> "$logfile"
    clear
    printf "Error: $1\n"
    exit 1
}
prepare() {
    printf "Preparing...\n"
    printf "Refreshing keys...\n(This will take a while!)\n"

    # Refresh keyring and update keyrings
    pacman-key --refresh >/dev/null 2>>"$logfile" || { error "Could not refresh keys"; }
    pacman -Sy --noconfirm archlinux-keyring parabola-keyring >/dev/null 2>>"$logfile" || { error "Could not install keyrings"; }

    # Install some essential programs
    pacman -S --noconfirm --needed git zsh ca-certificates >/dev/null 2>>"$logfile" || { error "Initial installs failed"; }

    # Enable parallel downloads and make pacman look nice
    grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
    sed -Ei "s/^#(ParallelDownloads).*/\1 = 5/;/^#Color$/s/#//" /etc/pacman.conf

    # Get progs.list
    cd /tmp && curl -O "$progs" || { error "Could not download progs.list"; }

    # Check for src dir and create if not found
    [ -d "/home/$name/.local/src" ] || sudo -u "$name" mkdir -p /home/"$name"/.local/src
}

install_programs() { # Read from progs.list and install each entry
    printf "### Installing from progs.list ###\n"
    while read -r program; do
	printf "Installing $program\n"
	pacman -S --noconfirm --needed  "$program" >/dev/null 2>>"$logfile" || printf "WARN: $program could not be installed\n" >> "$logfile"
    done < /tmp/progs.list
}

get_dotfiles() { # Download dotfiles and place them in $HOME
    printf "### Installing dotfiles ###\n"
    sudo -u "$name" git clone "$dotfiles" /tmp/dotfiles >/dev/null 2>>"$logfile" || { error "Could not clone dotfiles"; }
    sudo -u "$name" cp -rfT /tmp/dotfiles "/home/$name" >/dev/null 2>>"$logfile"
}

suckless() { # Clone and install suckless programs
    printf "### Installing suckless software ###\n"
    for program in dwm st dmenu; do
	cd /home/"$name"/.local/src
	printf "Installing $program\n"
	sudo -u "$name" git clone "$suckless"/"$program" >/dev/null 2>>"$logfile" || { error "Could not clone $program"; }
	cd "$program" && make clean install >/dev/null 2>>"$logfile" || { error "Could not install $program"; }
    done
}

follow_up() {
    printf "### Finishing touches ###\n"

    # Make zsh the default shell
    chsh -s /bin/zsh "$name" >/dev/null 2>>"$logfile"

    # Create some needed dirs
    sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"
    sudo -u "$name" mkdir -p "/home/$name/.config/mpd/playlists/"

    # Turn off the computer beep
    rmmod pcspkr
    printf "blacklist pcspkr\n" >/etc/modprobe.d/nobeep.conf

    # Get rid of no longer needed bash files
    yes | rm /home/$name/.bash*

    # Add some services to default runtime
    rc-update add avahi-daemon default >/dev/null
    rc-update add cupsd default >/dev/null
    rc-update add tor default >/dev/null
}

### SCRIPT ###

printf "###########################\n########## ZEROG ##########\n###########\
    ################\n"

prepare

install_programs

get_dotfiles

suckless

follow_up

printf "###########################\n########## ZEROG ##########\n###########\
    ################\nZEROG flight finished. Log in again and run 'startx' to \
    start your new system\nIf you liked this script, want to report bugs/issues \
	or contribute to it, let me know via mail <zerog@cybvik.xyz>\n"
